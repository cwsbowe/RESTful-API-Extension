---
swagger: "2.0"
info:
  description: "Documentation of the proposed API extension."
  version: "1.0.6"
  title: "RESTful API Extension"
tags:
- name: "bookings"
  description: "Everything about booking a room"
- name: "user"
  description: "Operations on a user"
- name: "report"
  description: "Management of the report system"
schemes:
- "https"
- "http"
paths:
  /bookings/{building_ID}/{room_ID}:
    get:
      tags:
      - "bookings"
      summary: "Finds all bookings in the room"
      description: ""
      operationId: "getBookings"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "building_ID"
        in: "path"
        description: "Building ID"
        required: true
        type: "integer"
      - name: "room_ID"
        in: "path"
        description: "Room ID"
        required: true
        type: "integer"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Room"
      security:
      - token: []
  /bookings/{building_ID}/{room_ID}/{booking_ID}:
    put:
      tags:
      - "bookings"
      summary: "Creates a room booking"
      description: ""
      operationId: "createBooking"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "building_ID"
        in: "path"
        description: "Building ID"
        required: true
        type: "integer"
        format: "int64"
      - name: "room_ID"
        in: "path"
        description: "Room ID"
        required: true
        type: "integer"
        format: "int64"
      - name: "booking_ID"
        in: "path"
        description: "Booking ID"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated booking"
        required: true
        schema:
          $ref: "#/definitions/Booking"
      responses:
        200:
          description: "Overrides previous booking\nonly occurs if a member of staff attempts to override a students booking"
        201:
          description: "Successfully created new booking"
        304:
          description: "User attempted to override a booking they weren't authorised to"
        400:
          description: "One or more of the IDs is invalid"
        401:
          description: "A student attempted to book a room when they have reached their limit"
      security:
      - token: []
    delete:
      tags:
      - "bookings"
      summary: "Cancel an existing booking"
      description: ""
      operationId: "deleteBooking"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "building_ID"
        in: "path"
        description: "Building ID"
        required: true
        type: "integer"
        format: "int64"
      - name: "room_ID"
        in: "path"
        description: "Room ID"
        required: true
        type: "integer"
        format: "int64"
      - name: "booking_ID"
        in: "path"
        description: "Booking ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully cancelled booking"
        400:
          description: "One or more of the IDs is invalid"
        401:
          description: "User attempted to cancel a booking they didn't make"
      security:
      - token: []
  /user/{user_ID}:
    get:
      tags:
      - "user"
      summary: "Get user by user ID"
      description: ""
      operationId: "getUserByID"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "user_ID"
        in: "path"
        description: "The user that needs to be fetched. "
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid user ID supplied"
        404:
          description: "User not found"
      security:
      - token: []
    put:
      tags:
      - "user"
      summary: "Updates a user's bookings"
      description: ""
      operationId: "updateUserBookings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "user_ID"
        in: "path"
        description: "ID of user that need to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "User successfully reported"
        400:
          description: "Invalid user supplied"
        401:
          description: "Unauthorised access"
        404:
          description: "User not found"
      security:
      - token: []
    patch:
      tags:
      - "user"
      summary: "Update user reports"
      description: ""
      operationId: "reportUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "user_ID"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Alteration to reportCount"
        required: true
        schema:
          $ref: "#/definitions/PatchReport"
      responses:
        202:
          description: "Server acknowledgement that an appeal has been registered and is under review"
        304:
          description: "Either a user's appeal has been rejected or a member of staff has been reported, resulting in no penalty"
        400:
          description: "Invalid user ID supplied"
        401:
          description: "Unauthorised access"
        404:
          description: "User not found"
      security:
      - token: []
  /report/{building_ID}/{room_ID}/{booking_ID}:
    post:
      tags:
      - "report"
      summary: "Report a booking as unused"
      description: ""
      operationId: "createReport"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "building_ID"
        in: "path"
        description: "order placed for purchasing the pet"
        required: true
        type: "integer"
        format: "int64"
      - name: "room_ID"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      - name: "booking_ID"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/Report"
      responses:
        201:
          description: "Successfully created a report"
        400:
          description: "Invalid booking ID entered"
        401:
          description: "Unauthorised access"
        404:
          description: "Building / room / booking not found"
        409:
          description: "The booking had already been reported"
      security:
      - token: []
    patch:
      tags:
      - "report"
      summary: "Update a report to increase number of reports"
      description: ""
      operationId: "amendReport"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "building_ID"
        in: "path"
        description: "order placed for purchasing the pet"
        required: true
        type: "integer"
        format: "int64"
      - name: "room_ID"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      - name: "booking_ID"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/PatchReport"
      responses:
        200:
          description: "Successfully altered number of reports"
      security:
      - token: []
    delete:
      tags:
      - "report"
      summary: "Delete a report"
      description: ""
      operationId: "deleteReport"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "building_ID"
        in: "path"
        description: "order placed for purchasing the pet"
        required: true
        type: "integer"
        format: "int64"
      - name: "room_ID"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      - name: "booking_ID"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Successfully deleted the report"
      security:
      - token: []
securityDefinitions:
  token:
    type: "apiKey"
    name: "token"
    in: "header"
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "https://petstore.swagger.io/oauth/authorize"
    flow: "implicit"
    scopes:
      read:pets: "read your pets"
      write:pets: "modify pets in your account"
definitions:
  Booking:
    type: "object"
    properties:
      booking_ID:
        type: "integer"
        format: "int64"
      user_ID:
        type: "integer"
        format: "int64"
  Room:
    type: "object"
    required:
    - "room_ID"
    properties:
      room_ID:
        type: "integer"
        format: "int64"
      bookings:
        type: "array"
        xml:
          wrapped: true
        items:
          xml:
            name: "booking"
          $ref: "#/definitions/Booking"
    xml:
      name: "Room"
  Report:
    type: "object"
    properties:
      booking_ID:
        type: "integer"
        format: "int64"
      user_ID:
        type: "integer"
        format: "int64"
      reportCount:
        type: "integer"
        format: "int64"
    xml:
      name: "Report"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      email:
        type: "string"
      userType:
        type: "string"
      bookings:
        type: "array"
        xml:
          wrapped: true
        items:
          xml:
            name: "booking"
          $ref: "#/definitions/Booking"
      reports:
        type: "array"
        xml:
          wrapped: true
        items:
          xml:
            name: "report"
          $ref: "#/definitions/Report"
    xml:
      name: "User"
  PatchReport:
    type: "object"
    properties:
      reportCount:
        type: "integer"
        format: "int64"
    xml:
      name: "PatchUser"